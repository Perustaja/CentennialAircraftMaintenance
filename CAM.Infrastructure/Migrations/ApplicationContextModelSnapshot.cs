// <auto-generated />
using System;
using CAM.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CAM.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("CAM.Core.Entities.Aircraft", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20);

                    b.Property<string>("ImagePath")
                        .HasMaxLength(100);

                    b.Property<bool>("IsTwin");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("SerialNum")
                        .HasMaxLength(30);

                    b.Property<int?>("Year");

                    b.HasKey("Id");

                    b.ToTable("Aircraft");
                });

            modelBuilder.Entity("CAM.Core.Entities.AircraftOwner", b =>
                {
                    b.Property<string>("AircraftId");

                    b.Property<int>("OwnerId");

                    b.HasKey("AircraftId", "OwnerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("AircraftOwner");
                });

            modelBuilder.Entity("CAM.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CAM.Core.Entities.Discrepancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AirTime");

                    b.Property<decimal>("AircraftTotal");

                    b.Property<bool>("AwaitingFinalize");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(60);

                    b.Property<int>("Cycles");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateFinalized");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<decimal>("Engine1Total");

                    b.Property<decimal>("Engine2Total");

                    b.Property<decimal>("Hobbs");

                    b.Property<bool>("IsFinalized");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<decimal>("Prop1");

                    b.Property<decimal>("Prop2");

                    b.Property<string>("Resolution")
                        .HasMaxLength(1000);

                    b.Property<decimal>("Tach1");

                    b.Property<decimal>("Tach2");

                    b.Property<int>("WorkOrderId");

                    b.Property<int?>("Year");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("Discrepancies");
                });

            modelBuilder.Entity("CAM.Core.Entities.DiscrepancyPart", b =>
                {
                    b.Property<int>("DiscrepancyId");

                    b.Property<int>("PartId");

                    b.Property<int>("Qty");

                    b.HasKey("DiscrepancyId", "PartId");

                    b.HasIndex("PartId");

                    b.ToTable("DiscrepancyParts");
                });

            modelBuilder.Entity("CAM.Core.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CertificationNum")
                        .HasMaxLength(20);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CAM.Core.Entities.LaborRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DiscrepancyId");

                    b.Property<int>("EmployeeId");

                    b.Property<decimal>("LaborInHours");

                    b.HasKey("Id");

                    b.HasIndex("DiscrepancyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LaborRecords");
                });

            modelBuilder.Entity("CAM.Core.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(60);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("CAM.Core.Entities.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<int>("MinimumStock");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<decimal>("PriceIn");

                    b.Property<decimal>("PriceOut");

                    b.Property<int>("QtyCurrent");

                    b.Property<int>("QtySoldYear");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("CAM.Core.Entities.Squawk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AircraftId")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateResolved");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool>("IsGroundable");

                    b.Property<string>("Pilot")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Resolution")
                        .HasMaxLength(1000);

                    b.Property<string>("ResolvedBy")
                        .HasMaxLength(30);

                    b.Property<int>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.HasIndex("StatusId");

                    b.ToTable("Squawks");
                });

            modelBuilder.Entity("CAM.Core.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsOpen");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("CAM.Core.Entities.Times", b =>
                {
                    b.Property<string>("AircraftId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20);

                    b.Property<int>("AirTime");

                    b.Property<decimal>("AircraftTotal");

                    b.Property<int>("Cycles");

                    b.Property<decimal>("Engine1Total");

                    b.Property<decimal>("Engine2Total");

                    b.Property<decimal>("Hobbs");

                    b.Property<decimal>("Prop1");

                    b.Property<decimal>("Prop2");

                    b.Property<decimal>("Tach1");

                    b.Property<decimal>("Tach2");

                    b.HasKey("AircraftId");

                    b.ToTable("Times");
                });

            modelBuilder.Entity("CAM.Core.Entities.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("CAM.Core.Entities.Aircraft", b =>
                {
                    b.HasOne("CAM.Core.Entities.Times", "Times")
                        .WithOne("Aircraft")
                        .HasForeignKey("CAM.Core.Entities.Aircraft", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CAM.Core.Entities.AircraftOwner", b =>
                {
                    b.HasOne("CAM.Core.Entities.Aircraft", "Aircraft")
                        .WithMany("AircraftOwners")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CAM.Core.Entities.Owner", "Owner")
                        .WithMany("AircraftOwners")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CAM.Core.Entities.Discrepancy", b =>
                {
                    b.HasOne("CAM.Core.Entities.WorkOrder", "WorkOrder")
                        .WithMany("Discrepancies")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CAM.Core.Entities.DiscrepancyPart", b =>
                {
                    b.HasOne("CAM.Core.Entities.Discrepancy", "Discrepancy")
                        .WithMany("DiscrepancyParts")
                        .HasForeignKey("DiscrepancyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CAM.Core.Entities.Part", "Part")
                        .WithMany("DiscrepancyParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CAM.Core.Entities.LaborRecord", b =>
                {
                    b.HasOne("CAM.Core.Entities.Discrepancy", "Discrepancy")
                        .WithMany("LaborRecords")
                        .HasForeignKey("DiscrepancyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CAM.Core.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CAM.Core.Entities.Part", b =>
                {
                    b.HasOne("CAM.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CAM.Core.Entities.Squawk", b =>
                {
                    b.HasOne("CAM.Core.Entities.Aircraft", "Aircraft")
                        .WithMany("Squawks")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CAM.Core.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
